{"version":3,"sources":["Components/Header/Header.module.css","Components/Sidebar/Sidebar.module.css","Components/LoginPage/LoginPage.module.css","Components/MainArea/MainArea.module.css","Components/Backdrop/Backdrop.module.css","Components/LoginPage/LoginPage.tsx","Components/MainArea/MainArea.tsx","Stores/Store.ts","Stores/storeContext.tsx","Components/Header/Header.tsx","Components/Sidebar/Sidebar.tsx","Components/Backdrop/Backdrop.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LoginPage","observer","className","classes","Login_Area","htmlFor","id","type","Login_button","MainArea","Login_container","MainStore","IsLogin","SideBarStatus","Set_SideBar_Status","this","console","log","SetIsLogin","storeContext","React","createContext","useStore","store","useContext","Error","StoreProvider","children","useLocalStore","Provider","value","Header","STORE","header","nav_bar","Burger_main_div","onClick","action","Burger_div","nav_bar_ul","nav_bar_ul_li","Sidebar","sideNavbarCss","aside_sidebar","Close","join","Open","nav_sidebar","ul_sidebar","Backdrop","backdrop","configure","enforceActions","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ea26b61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3bifb\",\"Burger_main_div\":\"Header_Burger_main_div__ImiMm\",\"Burger_div\":\"Header_Burger_div__KyCk7\",\"nav_bar\":\"Header_nav_bar__4QWv0\",\"nav_bar_ul\":\"Header_nav_bar_ul__3hCpR\",\"nav_bar_ul_li\":\"Header_nav_bar_ul_li__a2NY_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_sidebar\":\"Sidebar_nav_sidebar__1SQ9v\",\"ul_sidebar\":\"Sidebar_ul_sidebar__34fyW\",\"aside_sidebar\":\"Sidebar_aside_sidebar__2sjs6\",\"Open\":\"Sidebar_Open__3g_Qv\",\"Close\":\"Sidebar_Close__3xOTa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login_Area\":\"LoginPage_Login_Area__g5VWu\",\"Login_button\":\"LoginPage_Login_button__3lAOz\",\"animate-button-in\":\"LoginPage_animate-button-in__26QgQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login_container\":\"MainArea_Login_container__2wHBg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__klnol\"};","import React, { Fragment } from 'react';\r\n// import { useStore } from '../../Stores/storeContext';\r\nimport { observer } from 'mobx-react-lite';\r\nimport classes from \"./LoginPage.module.css\";\r\n\r\nconst LoginPage: React.FC = observer(() => {\r\n\r\n    // const STORE = useStore();\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.Login_Area}>\r\n                <section>\r\n                    <label htmlFor=\"Username\">Username: </label>\r\n                    <input id=\"Username\" type=\"text\" />\r\n                </section>\r\n                <section>\r\n                    <label htmlFor=\"Password\">Password: </label>\r\n                    <input id=\"Password\" type=\"password\" />\r\n                </section>\r\n                <section>\r\n                    <button className={classes.Login_button}>Login</button>\r\n                </section>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n\r\n})\r\n\r\nexport default LoginPage\r\n","import React, { Fragment } from 'react'\r\nimport LoginPage from '../LoginPage/LoginPage'\r\nimport classes from './MainArea.module.css';\r\n\r\nconst MainArea: React.FC = () => {\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.Login_container}>\r\n                <LoginPage />\r\n            </div>\r\n        </Fragment >\r\n    )\r\n\r\n}\r\nexport default MainArea;","const MainStore = () => {\r\n    return {\r\n        IsLogin: false,\r\n        SideBarStatus: false,\r\n\r\n        Set_SideBar_Status() {\r\n            this.SideBarStatus = !this.SideBarStatus;\r\n            console.log(this.SideBarStatus);\r\n        },\r\n\r\n        SetIsLogin() {\r\n            console.log(this.IsLogin);\r\n            this.IsLogin = !this.IsLogin;\r\n        }\r\n    };\r\n};\r\n\r\nexport default MainStore;\r\n\r\nexport type TStore = ReturnType<typeof MainStore>;\r\n","import React from 'react';\r\nimport { useLocalStore } from 'mobx-react-lite';\r\nimport MainStore, { TStore } from './Store';\r\n\r\nconst storeContext = React.createContext<TStore | null>(null);\r\n\r\nconst StoreProvider: React.FC = ({ children }) => {\r\n\r\n  const store = useLocalStore(MainStore)\r\n\r\n  return (\r\n    <storeContext.Provider value={store}> {children} </storeContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useStore() {\r\n  const store = React.useContext(storeContext);\r\n  if (!store) {\r\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\r\n    throw new Error(\"useStore must be used within a StoreProvider.\");\r\n  }\r\n  return store;\r\n}\r\n\r\n\r\nexport default StoreProvider;\r\n","import React, { Fragment } from 'react'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { action } from 'mobx';\r\nimport classes from './Header.module.css'\r\nimport { useStore } from '../../Stores/storeContext'\r\n\r\n\r\nconst Header: React.FC = observer(() => {\r\n    const STORE = useStore();\r\n\r\n    function burgerToggleClickHandler() {\r\n        STORE.Set_SideBar_Status()\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <header className={classes.header}>\r\n                <nav className={classes.nav_bar}>\r\n                    <div className={classes.Burger_main_div} onClick={action(burgerToggleClickHandler)}>\r\n                        <div className={classes.Burger_div}></div>\r\n                        <div className={classes.Burger_div}></div>\r\n                        <div className={classes.Burger_div}></div>\r\n                    </div>\r\n                    <ul className={classes.nav_bar_ul}>\r\n                        <li className={classes.nav_bar_ul_li}>Home</li>\r\n                        <li className={classes.nav_bar_ul_li}>Login</li>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        </Fragment>\r\n    )\r\n})\r\n\r\nexport default Header\r\n","import React, { Fragment } from \"react\";\r\nimport classes from \"./Sidebar.module.css\";\r\nimport { useStore } from \"../../Stores/storeContext\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\n\r\nconst Sidebar: React.FC = observer(() => {\r\n    const STORE = useStore();\r\n\r\n    let sideNavbarCss = [classes.aside_sidebar, classes.Close].join(\" \");\r\n\r\n    if (STORE.SideBarStatus === true) {\r\n        sideNavbarCss = [classes.aside_sidebar, classes.Open].join(\" \");\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <aside className={sideNavbarCss}>\r\n                <nav className={classes.nav_sidebar}>\r\n                    <ul className={classes.ul_sidebar}>\r\n                        <li>Home</li>\r\n                        <li>Login</li>\r\n                    </ul>\r\n                </nav>\r\n            </aside>\r\n        </Fragment>\r\n    );\r\n});\r\n\r\nexport default Sidebar;\r\n","import React, { Fragment } from \"react\";\r\nimport classes from \"./Backdrop.module.css\";\r\nimport { useStore } from \"../../Stores/storeContext\";\r\nimport { action } from \"mobx\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\n\r\nconst Backdrop: React.FC = observer(() => {\r\n\r\n  const STORE = useStore();\r\n\r\n  function burgerToggleClickHandler() {\r\n    STORE.Set_SideBar_Status()\r\n  }\r\n\r\n  const backdrop = <div className={classes.Backdrop} onClick={action(burgerToggleClickHandler)}></div>\r\n\r\n  return (\r\n    <Fragment>\r\n      {STORE.SideBarStatus ? backdrop : null}\r\n    </Fragment>\r\n  )\r\n});\r\n\r\nexport default Backdrop;\r\n","import React, { Fragment } from 'react';\r\nimport { configure } from 'mobx';\r\nimport MainArea from './Components/MainArea/MainArea';\r\nimport Header from './Components/Header/Header';\r\nimport StoreProvider from './Stores/storeContext';\r\nimport LoginPage from './Components/LoginPage/LoginPage';\r\nimport Sidebar from './Components/Sidebar/Sidebar';\r\nimport Backdrop from './Components/Backdrop/Backdrop';\r\n\r\nconfigure({ enforceActions: \"observed\" });\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className=\"App\">\r\n          <StoreProvider>\r\n            <Backdrop />\r\n            <Header />\r\n            <Sidebar />\r\n            <MainArea />\r\n          </StoreProvider>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}