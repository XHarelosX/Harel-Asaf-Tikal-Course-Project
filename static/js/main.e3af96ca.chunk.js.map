{"version":3,"sources":["Components/Header/Header.module.css","Components/Sidebar/Sidebar.module.css","Components/LoginPage/LoginPage.module.css","Components/MainArea/MainArea.module.css","Components/Backdrop/Backdrop.module.css","Stores/Store.ts","Stores/storeContext.tsx","Components/LoginPage/LoginPage.tsx","Components/MainArea/MainArea.tsx","Components/Header/Header.tsx","Components/Sidebar/Sidebar.tsx","Components/Backdrop/Backdrop.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MainStore","IsLogin","SideBarStatus","Set_SideBar_Status","this","console","log","SetIsLogin","storeContext","React","createContext","useStore","store","useContext","Error","StoreProvider","children","useLocalStore","Provider","value","LoginPage","observer","STORE","className","classes","Login_Area","htmlFor","id","type","Login_button","onClick","action","MainArea","isLoggedIn","valueOf","loginForm","Login_container","Header","loginButtonInNavbar","nav_bar_ul_li","header","nav_bar","Burger_main_div","Burger_div","nav_bar_ul","Sidebar","sideNavbarCss","aside_sidebar","Close","join","Open","nav_sidebar","ul_sidebar","ul_li","Backdrop","backdrop","configure","enforceActions","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3af96ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3UZcE\",\"Burger_main_div\":\"Header_Burger_main_div__1OIu6\",\"Burger_div\":\"Header_Burger_div__27xOd\",\"nav_bar\":\"Header_nav_bar__7Oxq5\",\"nav_bar_ul\":\"Header_nav_bar_ul__310H5\",\"nav_bar_ul_li\":\"Header_nav_bar_ul_li__2uNLT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_sidebar\":\"Sidebar_nav_sidebar__3HtIV\",\"ul_sidebar\":\"Sidebar_ul_sidebar__CI3jR\",\"ul_li\":\"Sidebar_ul_li__2guSL\",\"aside_sidebar\":\"Sidebar_aside_sidebar__2njwN\",\"Open\":\"Sidebar_Open__2r8o9\",\"Close\":\"Sidebar_Close__1kNrI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login_Area\":\"LoginPage_Login_Area__2WuoO\",\"Login_button\":\"LoginPage_Login_button__1jyUR\",\"animate-button-in\":\"LoginPage_animate-button-in__2wzE5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login_container\":\"MainArea_Login_container__3w142\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3jLYP\"};","const MainStore = () => {\r\n    return {\r\n        IsLogin: false,\r\n        SideBarStatus: false,\r\n\r\n        Set_SideBar_Status() {\r\n            this.SideBarStatus = !this.SideBarStatus;\r\n            console.log(this.SideBarStatus);\r\n        },\r\n\r\n        SetIsLogin() {\r\n            console.log(this.IsLogin);\r\n            this.IsLogin = !this.IsLogin;\r\n        }\r\n    };\r\n};\r\n\r\nexport default MainStore;\r\n\r\nexport type TStore = ReturnType<typeof MainStore>;\r\n","import React from 'react';\r\nimport { useLocalStore } from 'mobx-react-lite';\r\nimport MainStore, { TStore } from './Store';\r\n\r\nconst storeContext = React.createContext<TStore | null>(null);\r\n\r\nconst StoreProvider: React.FC = ({ children }) => {\r\n\r\n  const store = useLocalStore(MainStore)\r\n\r\n  return (\r\n    <storeContext.Provider value={store}> {children} </storeContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useStore() {\r\n  const store = React.useContext(storeContext);\r\n  if (!store) {\r\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\r\n    throw new Error(\"useStore must be used within a StoreProvider.\");\r\n  }\r\n  return store;\r\n}\r\n\r\n\r\nexport default StoreProvider;\r\n","import React, { Fragment } from 'react';\r\nimport { useStore } from '../../Stores/storeContext';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { action } from 'mobx';\r\nimport classes from \"./LoginPage.module.css\";\r\n\r\nconst LoginPage: React.FC = observer(() => {\r\n\r\n    const STORE = useStore();\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.Login_Area}>\r\n                <section>\r\n                    <label htmlFor=\"Username\">Username: </label>\r\n                    <input id=\"Username\" type=\"text\" />\r\n                </section>\r\n                <section>\r\n                    <label htmlFor=\"Password\">Password: </label>\r\n                    <input id=\"Password\" type=\"password\" />\r\n                </section>\r\n                <section>\r\n                    <button className={classes.Login_button} onClick={action(STORE.SetIsLogin)}>Login</button>\r\n                </section>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n\r\n})\r\n\r\nexport default LoginPage\r\n","import React, { Fragment } from \"react\";\r\nimport LoginPage from \"../LoginPage/LoginPage\";\r\nimport classes from \"./MainArea.module.css\";\r\nimport { useStore } from \"../../Stores/storeContext\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst MainArea: React.FC = observer(() => {\r\n  const STORE = useStore();\r\n  const isLoggedIn = STORE.IsLogin.valueOf();\r\n\r\n  const loginForm = (\r\n    <div className={classes.Login_container}>\r\n      <LoginPage />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n        {!isLoggedIn ? loginForm : null}\r\n    </Fragment>\r\n  );\r\n});\r\nexport default MainArea;\r\n","import React, { Fragment } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { action } from \"mobx\";\r\nimport classes from \"./Header.module.css\";\r\nimport { useStore } from \"../../Stores/storeContext\";\r\n\r\nconst Header: React.FC = observer(() => {\r\n  const STORE = useStore();\r\n\r\n  function burgerToggleClickHandler() {\r\n    STORE.Set_SideBar_Status();\r\n  }\r\n\r\n  const loginButtonInNavbar = <li className={classes.nav_bar_ul_li}>Logout</li>;\r\n  const isLoggedIn = STORE.IsLogin.valueOf();\r\n\r\n  return (\r\n    <Fragment>\r\n      <header className={classes.header}>\r\n        <nav className={classes.nav_bar}>\r\n          <div\r\n            className={classes.Burger_main_div}\r\n            onClick={action(burgerToggleClickHandler)}\r\n          >\r\n            <div className={classes.Burger_div}></div>\r\n            <div className={classes.Burger_div}></div>\r\n            <div className={classes.Burger_div}></div>\r\n          </div>\r\n          <ul className={classes.nav_bar_ul}>\r\n            <li className={classes.nav_bar_ul_li}>Home</li>\r\n            {isLoggedIn ? loginButtonInNavbar : null}\r\n          </ul>\r\n          {/* <img src=\"../../university_logo.jpg\"/> */}\r\n        </nav>\r\n      </header>\r\n    </Fragment>\r\n  );\r\n});\r\n\r\nexport default Header;\r\n","import React, { Fragment } from \"react\";\r\nimport classes from \"./Sidebar.module.css\";\r\nimport { useStore } from \"../../Stores/storeContext\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\n\r\nconst Sidebar: React.FC = observer(() => {\r\n    const STORE = useStore();\r\n\r\n    let sideNavbarCss = [classes.aside_sidebar, classes.Close].join(\" \");\r\n\r\n    if (STORE.SideBarStatus === true) {\r\n        sideNavbarCss = [classes.aside_sidebar, classes.Open].join(\" \");\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <aside className={sideNavbarCss}>\r\n                <nav className={classes.nav_sidebar}>\r\n                    <ul className={classes.ul_sidebar}>\r\n                        <li className={classes.ul_li}>Home</li>\r\n                        <li className={classes.ul_li}>Login</li>\r\n                    </ul>\r\n                </nav>\r\n            </aside>\r\n        </Fragment>\r\n    );\r\n});\r\n\r\nexport default Sidebar;\r\n","import React, { Fragment } from \"react\";\r\nimport classes from \"./Backdrop.module.css\";\r\nimport { useStore } from \"../../Stores/storeContext\";\r\nimport { action } from \"mobx\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\n\r\nconst Backdrop: React.FC = observer(() => {\r\n\r\n  const STORE = useStore();\r\n\r\n  function burgerToggleClickHandler() {\r\n    STORE.Set_SideBar_Status()\r\n  }\r\n\r\n  const backdrop = <div className={classes.Backdrop} onClick={action(burgerToggleClickHandler)}></div>\r\n\r\n  return (\r\n    <Fragment>\r\n      {STORE.SideBarStatus ? backdrop : null}\r\n    </Fragment>\r\n  )\r\n});\r\n\r\nexport default Backdrop;\r\n","import React, { Fragment } from 'react';\r\nimport { configure } from 'mobx';\r\nimport MainArea from './Components/MainArea/MainArea';\r\nimport Header from './Components/Header/Header';\r\nimport StoreProvider from './Stores/storeContext';\r\nimport Sidebar from './Components/Sidebar/Sidebar';\r\nimport Backdrop from './Components/Backdrop/Backdrop';\r\n\r\nconfigure({ enforceActions: \"observed\" });\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className=\"App\">\r\n          <StoreProvider>\r\n            <Backdrop />\r\n            <Header />\r\n            <Sidebar />\r\n            <MainArea />\r\n          </StoreProvider>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}